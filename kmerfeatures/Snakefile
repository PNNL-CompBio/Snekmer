configfile: "config.yaml"

# imports
import glob
import sys
import random

import h5py
import kmerfeatures as kmf

# from types import *
from Bio import SeqIO
from os.path import (basename, join, splitext)
from Util.SIEVEInit import get_alphabets


# pull config params
files = glob.glob(join(config['input']['fasta_dir'], "*.fasta"))
FNS = [splitext(basename(f))[0] for f in files]


# rules
rule all:
    input:
        expand(join(config['output']['save_dir'], "features", "{fn}.txt"), fn=FNS)
        # expand(join(config['output']['save_dir'], "score"))  # eventually


if config['input']['walk']:
    rule perform_kmer_walk:
        input:
            fasta=join(config['input']['fasta_dir'], "{fn}.fasta")
        output:
            # need to fix code to properly generate an output...
        run:
            kmf.walk.kmer_walk(input.fasta)


rule preprocess:
    input:
        fasta=join(config['input']['fasta_dir'], "{fn}.fasta")
    output:
        join(config['output']['save_dir'], "processed", "{fn}.hdf5")
    run:
        # read fasta file
        seq_list, id_list = kmf.utils.read_fasta(input.fasta)

        # if random alphabet specified, implement randomization
        if config['input']['kmer']['randomize_alphabet']:
            # this = []  # what
            rand_alphabet = kmf.transform.randomize_alphabet(map_function)
            map_function = [residues, map_name, rand_alphabet]

        # if no feature set is specified, define feature space
        if config['input']['feature_set'] is None:
            # prefilter fasta to cut down on the size of feature set
            filter_dict = kmf.features.define_feature_space(
                sequence_dict=sequence_dict,
                kmer=config['input']['kmer']['k'],
                map_function=map_function,
                start=config['input']['kmer']['start'],
                end=config['input']['kmer']['end'],
                min_rep_thresh=config['input']['kmer']['min_rep_thresh'],
                verbose=config['output']['verbose']
                )
        else:
            # read in list of ids to use from file; NO FORMAT CHECK
            filter_list = []
            with open(config['input']['feature_set'], "r") as f:
                for line in f.readlines():
                    filter_list.append(line.split()[0])

        # filter duplicates?
        seen, first = [], True

        for i in range(len(seq_list)):
            seq = seq_list[i]
            sid = id_list[i]

            # ignore duplicate ids
            if config['output']['filter_duplicates'] and sid in seen:
                continue
            seen.append(sid)

            seqs = [seq, ]
            sids = [sid, ]

            # shuffle the N-terminal sequence n times
            if config['output']['shuffle_n']:
                example_index[id] = 1.0
                scid_list, scramble_list, example_index = kmf.transform.scramble_sequence(
                    sid, seq[:30], n=config['output']['shuffle_n'],
                    example_index=config['output']['example_index_file']
                    )
                seqs += scramble_list
                sids += scid_list

                # include shuffled sequences in output
                if config['output']['shuffle_sequences']:
                    filename = join(config['output']['save_dir'], "processed",
                                    "%s_shuffled.fasta" % sid)
                    with open(filename, "w") as f:
                        for i in range(len(sids)):
                            f.write(">%s\n%s\n" % (sids[i], seqs[i]))

            # run SIEVE on the wt and each shuffled sequence
            if config['output']['n_terminal_file']:
                sids_n, seqs_n = kmf.transform.make_n_terminal_fusions(
                    sid, config['output']['n_terminal_file']
                    )
                seqs += seqs_n
                sids += sids_n
            residues = None
            if config['input']['nucleotide']:
                residues = "ACGT"

        with h5py.File(output[0], "w") as f:
            mf_data = f.create_dataset("map_function",
                                       data=map_function)
                                       # dtype=)
            # note to self: redo with sids/seqs saved in filtered group
            filt_data = f.create_dataset("filter",
                                         data=filt_data)
        map_function, filter


rule generate_features:
    input:
        data=join(config['output']['save_dir'], "processed", "{fn}.hdf5"),
    output:
        features=join(config['output']['save_dir'], "features", "{fn}.txt")
    log:
        join(config['output']['save_dir'], "logs", "{fn}.log")
    run:
        # read processed features
        with h5py.File(input.data, 'r') as f:
            map_function = f['map_function']

        # optional indexfile with IDs of good feature output examples
        if config['input']['example_index_file']:
            example_index = kmf.utils.read_example_index(
                config['input']['example_index_file']
                )
        else:
            example_index = {}

        # apply user-specified save name, if it exists
        # if config['output']['filename'] is None:
        #     output_file = wildcards.fn

        # catch multiples w/ same identifier- but may
        # result in problems if there are more than one of the same
        # identifier (i.e. user's files might be messy this way)
        seen, first = [], True
        for i in range(len(seq_list)):
            seq = seq_list[i]
            sid = id_list[i]

            if config['output']['filter_duplicates'] and sid in seen:
                continue
            seen.append(sid)

            seqs = [seq, ]
            sids = [sid, ]

            # shuffle the N-terminal sequence N times and run SIEVE on the wt and each shuffled sequence
            if config['output']['shuffle_n']:
                example_index[id] = 1.0
                scid_list, scramble_list, example_index = kmf.transform.scramble_sequence(
                    sid, seq[:30], n=shuffle_n, example_index=example_index
                    )
                seqs += scramble_list
                sids += scid_list

                if config['output']['shuffle_sequences']:
                    filename = "%s_shuffled.fasta" % sid
                    with open(filename, "w") as f:
                        for i in range(len(sids)):
                            # seq_id =
                            # seq = seqs[i]
                            f.write(">%s\n%s\n" % (sids[i], seqs[i]))

            if config['output']['n_terminal_file']:
                addid_list, addseq_list = kmf.transform.make_n_terminal_fusions(
                    sid, config['output']['n_terminal_file']
                    )
                sequences += addseq_list
                ids += addid_list

            residues = None
            if nucleotide:
                residues = "ACGT"

            labels = []
            for j in range(len(sequences)):
                sequence = seqs[j]
                seq_id = sids[j]

                if verbose:
                    print("Constructing features for sequence %s" % seq_id)

                features = [seq_id,]

                features += kmf.transform.vectorize_string(
                    sequence=sequence, kmer=kmer, start=start, end=end,
                    map_function=map_function, residues=residues,
                    filter_list=filter_list, kmer_output=kmer_output
                    )
                if first:
                    labels += kmf.transform.vectorize_string(
                        return_labels=True, kmer=kmer, start=start, end=end,
                        map_function=map_function, residues=residues,
                        filter_list=filter_list
                        )
                    if features_output_format == "simple":
                        output_features("matrix", output.features, labels=labels)

                first = False
                i += 1

                # print(features)

                # output as we go (esp. good for very large input files)
                if config['output']['format'] == "simple":
                    output_features("matrix", output.features,
                                    feature_sets=[features, ], write_mode="a")

                # output sieve patterns as we go to provide a record
                if config['output']['format'] in ("sieve", "both"):
                    output_features("sieve", output.features,
                                    feature_sets=[features, ], write_mode="a",
                                    example_index=example_index)

                # only append features if not dumping into file
                if config['output']['format'] != "simple":
                    feature_sets.append(features)  # what happens with this


rule score_features:
    input:
    output:
    run:
        matrix = kmf.score.connection_matrix_from_features(input[0])
        clusters = kmf.score.cluster_feature_matrix(matrix)
