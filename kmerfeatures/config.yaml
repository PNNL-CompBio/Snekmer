input:
  fasta_dir: "../example"
  example_index_file: False
  walk: False
  feature_set: '../example/model_features.txt'

kmer:
  k: 14
  start: False
  end: False
  nucleotide: False
  map_function: 'reduced_alphabet_0'  # choices: 0-5
  randomize_alphabet: False
  min_rep_thresh: 1

output:
  save_dir: "../../output"
  verbose: True
  format: 'simple'  # choices: ['simple', 'gist', 'sieve']
  filename: False
  filter_duplicates: True
  n_terminal_file: False
  shuffle_n: False
  shuffle_sequences: False
  kmer_output: True

# parser.add_argument('-v', '--verbose', action='store_false', help='verbose output')
#   parser.add_argument('-p', '--parameterfile', metavar='PATH', help='filename of a parameter file to use')
#   parser.add_argument('-f', '--fastafile', metavar='PATH', help='FASTA-format file containing protein sequences')
#   parser.add_argument('-k', '--kmer', metavar='N', type=int, default=3, help='kmer length for features')
#   parser.add_argument('-s', '--start', metavar='N', type=int, help='first residue of sequences to start generating features')
#   parser.add_argument('-n', '--end', metavar='N', type=int, help='last residue of sequences to start generating features')
#   parser.add_argument('-d', '--nucleotide', action='store_true', help='process nucleotide sequences')
#   parser.add_argument('-M', '--map_function', metavar='FUNCTION', choices=MAP_FNS, help=('mapping function for reduced amino acid alphabets:' + str(MAP_FNS)))
#   parser.add_argument('-r', '--randomize_alphabet', action='store_true', help='randomize alphabet used - but using the same number of categories and distribution as specificed by the map_function')
#   parser.add_argument('-R', '--min_rep_thresh', type=float, default=1, help='minimum number of sequences to include feature for prefiltering. 0>R<1 is percentage of input sequences')
#   parser.add_argument('-e', '--example_indexfile', metavar='FPATH', help='file containing identifiers of positive examples for sieve output records or gist .class files')
#   parser.add_argument('-m', '--features_output_format', metavar='OPTION', type=str, default='simple', choices=FEAT_OUT_FMTS.keys(), help=('format for outputting feature sets' + str(FEAT_OUT_FMTS)))
#   parser.add_argument('-o', '--features_output_filebase', metavar='BASENAME', help='filename base (no suffix) for output features')
#   parser.add_argument('-D', '--filter_duplicates', action='store_false', help='filter out duplicate identifiers from the fasta files and/or blast output')
#   parser.add_argument('-Q', '--output_shuffled_sequences', metavar='N', type=int, help='output shuffled sequences in a fasta file for each input sequence')
#   parser.add_argument('-F', '--feature_set', help='specify which features to include in the model')
#   parser.add_argument('-K', '--kmer_output', action='store_false', help='verbose output of kmer positions for each sequence [under development]')
#   parser.add_argument('-w', '--walk', action='store_true', help='perform a kmer walk on the input fasta file to get an idea of the kmer representation')
